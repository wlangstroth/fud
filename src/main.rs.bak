extern crate clap;

use clap::{App, SubCommand};

fn add_food() {
    println!("Adding food");
}

fn add_meal() {
    println!("Adding meal");
}

fn list_foods() {
    println!("Food list");
}

fn list_meals() {
    println!("Meal list");
    // SELECT * FROM meals 
    // ORDER BY datestamp, 
    // (CASE meal_code 
    // WHEN 'B'
    // THEN 1
    // WHEN 'L'
    // THEN 2
    // WHEN 'A'
    // THEN 3
    // WHEN 'D'
    // THEN 4
    // WHEN 'E'
    // THEN 5);
}

fn show_plan() {
    println!("Rough plan outline");
    println!("                       F    C   P");
    println!("Breakfast      8:00   10   40  40");
    println!("Lunch         12:00	   20  70   80");
    println!("Afternoon     15:00	    5  30   10");
    println!("Dinner        18:00	   25  70   60");
    println!("Evening       22:00	    5  30   30");
    println!("                      65 240  220");
}

fn main() {
    // let args: Vec<_> = std::env::args().collect();
    
    let matches = App::new("fud")
                    .version("0.1")
                    .author("Will Langstroth <will@langstroth.com")
                    .about("Keep track of your eating.")
                    .subcommand(SubCommand::with_name("meal")
                        .about("Interactively add a meal"))
                    .subcommand(SubCommand::with_name("meals")
                        .about("See recorded meals"))
                    .subcommand(SubCommand::with_name("food")
                        .about("Interactively add a food to the database"))
                    .subcommand(SubCommand::with_name("foods")
                        .about("See the list of foods"))
                    .subcommand(SubCommand::with_name("plan")
                        .about("See the meal plan"))
                    .get_matches();
    
    match matches.subcommand_name() {
        Some("food") => add_food(),
        Some("meal") => add_meal(),
        Some("foods") => list_foods(),
        Some("meals") => list_meals(),
        Some("plan") => show_plan(),
        None => println!("No subcommand was used"),
        _ => println!("Some other subcommand was used"),
    }
}
